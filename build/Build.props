<Project>
  <!--
    https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022
    https://github.com/castleproject/Core/pull/616
  -->

  <!--
    PROPERTIES
  -->

  <PropertyGroup>
    <WinExeTargetFrameworks>net7.0-windows</WinExeTargetFrameworks>
    <!--<WinExeTargetFrameworks>net48</WinExeTargetFrameworks>-->
    <WinLibTargetFrameworks>net7.0-windows;net6.0-windows;net48</WinLibTargetFrameworks>
    <!--<WinLibTargetFrameworks>net48</WinLibTargetFrameworks>-->
    <ExeTargetFrameworks>net7.0</ExeTargetFrameworks>
    <LibTargetFrameworks>net7.0;net6.0;net48</LibTargetFrameworks>
    <ExeTestTargetFrameworks>net7.0;net6.0;net48</ExeTestTargetFrameworks>
    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>

    <LangVersion>latest</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <!--

      NOTE:   How to Specify OutputPath and IntermediateOutputPath manually to move them out of source codes folder (src).
              https://github.com/MicrosoftDocs/visualstudio-docs/issues/853
              https://github.com/dotnet/msbuild/issues/1603

    -->
    <UseCommonOutputDirectory>false</UseCommonOutputDirectory>

    <!--
      https://docs.microsoft.com/en-us/cpp/build/reference/common-macros-for-build-commands-and-properties?view=msvc-170
      https://github.com/dotnet/sdk/issues/867
      https://github.com/dotnet/msbuild/issues/3244
      https://github.com/dotnet/msbuild/issues/3497
      https://github.com/dotnet/msbuild/issues/4881
      https://github.com/OmniSharp/omnisharp-vscode/issues/4787
    -->
    <BuildConfigurationFolder>build</BuildConfigurationFolder>
    <OutputFolder>bin</OutputFolder>
    <TemporaryOutputFolder>obj</TemporaryOutputFolder>

    <OutputBaseFolderPath>$(SolutionDir)$(OutputFolder)\</OutputBaseFolderPath>
    <BaseOutputPath>$(OutputBaseFolderPath)</BaseOutputPath>
    <OutputPath>$(OutputBaseFolderPath)$(Configuration)\$(TargetFramework)\$(MSBuildProjectName)\</OutputPath>
    <OutDir>$(OutputPath)</OutDir>

    <!--

      NOTE:   IntermediateOutputPath has a certain, predefined folder structure,
              where TargetFramework will be automatically added after itself.
              That way, TargetFramework cannot be specified before MSBuildProjectName within the path.
              In short, TargetFramework cannot be re-specified within IntermediateOutputPath.
              That is unlike OutputPath, where TargetFramework can be specified anywhere within the path.

              IntermediateOutputPath is predefined as follows:

              $(MSBuildProjectName)\$(Configuration)\$(TargetFramework)

      NOTE:   NuGet messed up with the need to set both MSBuildProjectExtensionsPath and BaseIntermediateOutputPath.

      - IntermediateOutputPath is scoped per project configuration (Configuration), eg.: Debug or Release.
        It is used by MSBuild as temporary output path.
        When overridden, Configuration MUST BE EXPLICITLY specified within the path,
        along with MSBuildProjectName.

        IntermediateOutputPath is re-defined as follows:

        <IntermediateOutputPath>$(IntermediateOutputBaseFolderPath)\$(MSBuildProjectName)\$(Configuration)\</IntermediateOutputPath>

      - BaseIntermediateOutputPath is scoped per project configuration (Configuration), eg.: Debug or Release.
        It is used by NuGet as temporary output path for NuGet specification files (.nuspec)
        for the project NuGet package created.
        BaseIntermediateOutputPath has a certain, predefined folder structure,
        where Configuration will be automatically added after itself.
        Thus, there is no need to re-specify Configuration within the path.
        The MSBuildProjectName however MUST BE EXPLICITLY specified.
        BaseIntermediateOutputPath consists of the following files:
        - [ProjectName/PackageName].[PackageVersion].nuspec
        - [ProjectName/PackageName].[PackageVersion].symbols.nuspec

        BaseIntermediateOutputPath is re-defined as follows:

        <BaseIntermediateOutputPath>$(IntermediateOutputBaseFolderPath)\$(MSBuildProjectName)\</BaseIntermediateOutputPath>

      - MSBuildProjectExtensionsPath is scoped per project (MSBuildProjectName).
        It is used by NuGet as RestoreOutputPath.
        https://github.com/NuGet/NuGet.Client/blob/deab84db30cbd8cc738cd46ad694aebdbb43a1cf/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L592
        - https://github.com/MicrosoftDocs/visualstudio-docs/issues/853
        MSBuildProjectExtensionsPath consists of, at least, the following files:
        - project.assets.json
        - project.nuget.cache
        - [ProjectName].csproj.nuget.dgspec.json
        - [ProjectName].csproj.nuget.g.props
        - [ProjectName].csproj.nuget.g.targets

        MSBuildProjectExtensionsPath is re-defined as follows:

        <MSBuildProjectExtensionsPath>$(IntermediateOutputBaseFolderPath)\$(MSBuildProjectName)\</MSBuildProjectExtensionsPath>

        NOTE:   There seems to be an known issue with .NET Framework 4.8 WPF project when overriding this property.
                https://github.com/dotnet/wpf/issues/5679


      ============
      GLOSSARIES
      ============
      - MSBuildProjectName = project name
      - TargetFramework = project target framework moniker, eg: net6.0, net48, etc.
      - Configuration = project build configuration, eg: Debug or Release

    -->
    <IntermediateOutputBaseFolderPath>$(SolutionDir)$(TemporaryOutputFolder)\</IntermediateOutputBaseFolderPath>
    <BaseIntermediateOutputPath>$(IntermediateOutputBaseFolderPath)\$(MSBuildProjectName)\</BaseIntermediateOutputPath>
    <!--<MSBuildProjectExtensionsPath>$(IntermediateOutputBaseFolderPath)\$(MSBuildProjectName)\</MSBuildProjectExtensionsPath>-->
    <IntermediateOutputPath>$(IntermediateOutputBaseFolderPath)\$(MSBuildProjectName)\$(Configuration)\</IntermediateOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <NoWarn>$(NoWarn);CS1591</NoWarn>
    <NoWarn>$(NoWarn);CS0612;CS0618</NoWarn>
    <!--<NoWarn>$(NoWarn);CS8618</NoWarn>-->

    <BuildVersion>0.0.0</BuildVersion>
    <BuildVersion Condition="'$(APPVEYOR_BUILD_VERSION)' != ''">$(APPVEYOR_BUILD_VERSION)</BuildVersion>
    <BuildVersionMajor>$(BuildVersion.Split('.')[0])</BuildVersionMajor>
    <BuildVersionNoSuffix>$(BuildVersion.Split('-')[0])</BuildVersionNoSuffix>

    <AssemblyOriginatorKeyFile>$(SolutionDir)$(BuildConfigurationFolder)\NHibernate.ObservableCollections.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>

    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/mahara/NHibernate.ObservableCollections</RepositoryUrl>
  </PropertyGroup>

  <!--
    https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/nuget
  -->
  <PropertyGroup>
    <Product>NHibernate.ObservableCollections</Product>
    <Title>$(Product)</Title>
    <Description>$(Product)</Description>
    <Authors>NHibernate.ObservableCollections Contributors</Authors>
    <CurrentYear>$([System.DateTime]::Now.ToString("yyyy"))</CurrentYear>
    <Copyright>Copyright (c) $(CurrentYear) NHibernate.ObservableCollections - https://github.com/mahara/NHibernate.ObservableCollections</Copyright>

    <VersionPrefix>$(BuildVersion)</VersionPrefix>
    <AssemblyVersion>$(BuildVersionMajor).0.0</AssemblyVersion>
    <FileVersion>$(BuildVersionNoSuffix)</FileVersion>

    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageProjectUrl>https://github.com/mahara/NHibernate.ObservableCollections</PackageProjectUrl>
    <!--<PackageIcon>NHibernate.ObservableCollections.png</PackageIcon>-->
    <PackageTags>$(Product)</PackageTags>
    <PackageVersion>$(BuildVersion)</PackageVersion>
    <PackageOutputPath>$(OutputBaseFolderPath)$(Configuration)\</PackageOutputPath>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>false</IncludeSource>
    <ContentTargetFolders>.</ContentTargetFolders>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="$(SolutionDir)LICENSE" Link="Properties\LICENSE" Pack="true" />
  </ItemGroup>

  <PropertyGroup>
    <DiagnosticsConstants>DEBUG</DiagnosticsConstants>
    <NetConstants>TRACE</NetConstants>
    <NetFrameworkConstants>TRACE</NetFrameworkConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)|$(Configuration)' == 'net48|Debug'">
    <DefineConstants>$(DiagnosticsConstants);$(NetFrameworkConstants)</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)|$(Configuration)' == 'net48|Release'">
    <DefineConstants>$(NetFrameworkConstants)</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <!--
      https://andrewlock.net/using-reference-assemblies-to-build-net-framework-libararies-on-linux-without-mono/
    -->
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.3" PrivateAssets="All" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net7.0' OR '$(TargetFramework)' == 'net6.0'">
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net48'">
    <!--
      https://github.com/dotnet/runtime/issues/59163
      https://github.com/dotnet/sdk/issues/19521
    -->
    <Reference Include="System.Net.Http" />

    <PackageReference Include="IndexRange" Version="1.0.2" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="$(SolutionDir)$(BuildConfigurationFolder)\AssemblyInfo.Global.cs" Link="Properties\AssemblyInfo.Global.cs" />
  </ItemGroup>

</Project>
